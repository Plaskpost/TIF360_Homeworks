import keras
import SimulationEnvironment

# 0. Instructions.
#   - What is time2vector(x).
#       - Data representation of the notion of time.
#   - What is singleAttention(in_seq, in_seq, in_seq).

# 1. Pretrain convolutional encoder and decoder.
#   - Input.
#       - Size n. Generated by convolutional network from video frame.
#   - Output.
#       - Bottleneck: dimension (n,t)
#       - Decoder: Video frames.
#   - Training method.
#   - Structure.
#       1. Video frame is downsampled through a series of convolutional steps to a one dimensional representation of length n.
# NOTE: NO TRANSFORMER IS INCLUDED IN TASK 1.

# 2. Build and train a transformer network.

Conv2D = keras.layers.Conv2D
MaxPool2D = keras.layers.MaxPooling2D
Dense = keras.layers.Dense
Flatten = keras.layers.Flatten

dataset = SimulationEnvironment.get_dataset()

model = keras.models.Sequential()
model.add(Conv2D(8,(3,3), activation="relu", padding="same", input_shape=(64,64,1)))  # TODO: Find input shape from data set somehow.
model.add(MaxPool2D(pool_size=(2,2)))
model.add(Conv2D(16,(3,3),activation="relu",padding="same"))
model.add(MaxPool2D(pool_size=(2,2)))
model.add(Conv2D(32,(3,3),activation="relu",padding="same"))
model.add(Flatten())
model.add(Dense(32,activation="relu"))
model.add(Dense(32,activation="relu"))
model.add(Dense(2))

optimizer=keras.optimizers.Adam(learning_rate=0.01)
model.compile(optimizer=optimizer,loss="mae")
model.build()